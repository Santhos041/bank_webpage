# -*- coding: utf-8 -*-
"""spp_apple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hyomqK-VXxn5Mp9VV1iDtsq_Y-sF9Ex9
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from tensorflow import keras
import seaborn as sns
import os
from datetime import datetime

import warnings
warnings.filterwarnings("ignore")

data = pd.read_csv('/content/AAPL.csv')
print(data.shape)
print(data.sample(7))

data.info()

data['Date'] = pd.to_datetime(data['Date'])
data.info()

prediction_range = data.loc[(data['Date'] > datetime(2019,5,10))
& (data['Date']<datetime(2021,3,24))]
plt.plot(data['Date'],data['Close'])
plt.xlabel("Date")
plt.ylabel("Close")
plt.title("Apple Stock Prices")
plt.show()

close_data = data.filter(['Close'])
dataset = close_data.values
training = int(np.ceil(len(dataset) * .95))
print(training)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(dataset)

train_data = scaled_data[0:int(training), :]

x_train = []
y_train = []

for i in range(60, len(train_data)):
	x_train.append(train_data[i-60:i, 0])
	y_train.append(train_data[i, 0])

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

model = keras.models.Sequential()
model.add(keras.layers.LSTM(units=64,
							return_sequences=True,
							input_shape=(x_train.shape[1], 1)))
model.add(keras.layers.LSTM(units=64))
model.add(keras.layers.Dense(32))
model.add(keras.layers.Dropout(0.5))
model.add(keras.layers.Dense(1))
model.summary

model.compile(optimizer='adam',
			loss='mean_squared_error')
history = model.fit(x_train,
					y_train,
					epochs=10)

test_data = scaled_data[training - 60:, :]
x_test = []
y_test = dataset[training:, :]
for i in range(60, len(test_data)):
	x_test.append(test_data[i-60:i, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

mse = np.mean(((predictions - y_test) ** 2))
print("MSE", mse)
print("RMSE", np.sqrt(mse))

train = data[:training]
test = data[training:]
test['Predictions'] = predictions

plt.figure(figsize=(10, 8))
plt.plot(train['Date'], train['Close'])
plt.plot(test['Date'], test[['Close', 'Predictions']])
plt.title(' Apple Stock Close Price')
plt.xlabel('Date')
plt.ylabel("Close")
plt.legend(['Train', 'Test', 'Predictions'])

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

last_date = data['Date'].max()
next_dates = pd.date_range(start=last_date, periods=30, freq='D')
last_60_days = scaled_data[-60:]

x_input = last_60_days.reshape((1, 60, 1))
predictions_next_1_month = []

for _ in range(len(next_dates)):

    next_price = model.predict(x_input, verbose=0)

    predictions_next_1_month.append(next_price[0][0])

    x_input = np.append(x_input[:,1:,:], np.expand_dims(next_price, axis=1), axis=1)

predictions_next_1_month = scaler.inverse_transform(np.array(predictions_next_1_month).reshape(-1, 1))

# Plot the predictions for the next three months
plt.figure(figsize=(10, 6))
plt.plot(data['Date'], data['Close'], label='Historical Data')
plt.plot(next_dates, predictions_next_1_month, label='Predicted Prices')  # Use next_dates
plt.title('Apple Stock Price Prediction for the Next 1 Month')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()

# Get the predicted price for the final day as a single value
final_day_predicted_price = predictions_next_1_month[-1][0]

print("Predicted price for the final day:", final_day_predicted_price)